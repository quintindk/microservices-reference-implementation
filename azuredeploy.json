{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environmentName": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "qa",
                "staging",
                "prod"
            ]
        },
        "acrResourceGroupName": {
            "type": "string"
        },
        "acrResourceGroupLocation": {
            "type": "string"
        },
        "deliveryIdName": {
            "metadata": {
                "description": "Name of the delivery managed identity"
            },
            "type": "string"
        },
        "deliveryPrincipalId": {
            "metadata": {
                "description": "Principal id for the delivery managed identity"
            },
            "type": "string"
        },
        "droneSchedulerIdName": {
            "metadata": {
                "description": "Name of the drone scheduler managed identity"
            },
            "type": "string"
        },
        "droneSchedulerPrincipalId": {
            "metadata": {
                "description": "Principal id for the drone scheduler managed identity"
            },
            "type": "string"
        },
        "workflowIdName": {
            "metadata": {
                "description": "Name of the workflow managed identity"
            },
            "type": "string"
        },
        "workflowPrincipalId": {
            "metadata": {
                "description": "Principal id for the workflow managed identity"
            },
            "type": "string"
        },
        "appGatewayControllerIdName": {
            "metadata": {
                "description": "Name of the app gateway controller managed identity"
            },
            "type": "string"
        },
        "appGatewayControllerPrincipalId": {
            "metadata": {
                "description": "Principal id for the app gateway controller managed identity"
            },
            "type": "string"
        },
        "sshRSAPublicKey": {
            "type": "string",
            "metadata": {
                "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
            }
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "string"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring"
        },
        "servicePrincipalId": {
            "metadata": {
                "description": "Principal ID (used by cloudprovider)"
            },
            "type": "string"
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "User name for the Linux Virtual Machines."
            },
            "defaultValue": "azureuser"
        },
        "kubernetesVersion": {
            "type": "string",
            "metadata": {
                "description": "The version of Kubernetes. It must be supported in the target location."
            }
        },
        "deliveryRedisStorageType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS"
            ],
            "metadata": {
                "description": "Type of the storage account that will store Redis Cache."
            }
        },
        "deliveryRedisDiagnosticsEnabled": {
            "type": "bool",
            "allowedValues": [
                false,
                true
            ],
            "defaultValue": false,
            "metadata": {
                "description": "A value that indicates whether diagnostics should be saved to the specified storage account."
            }
        },
        "networkPolicy": {
            "type": "string",
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "calico"
            ],
            "metadata": {
                "description": "Network policy used for configuring Kubernetes network profile."
            }
        },
        "applicationGatewaySize": {
            "type": "string",
            "allowedValues": [
                "WAF_v2",
                "Standard_v2"
            ],
            "defaultValue": "WAF_v2",
            "metadata": {
                "description": "Application gateway size"
            }
        },
        "applicationGatewayTier": {
            "type": "string",
            "allowedValues": [
                "WAF_v2",
                "Standard_v2"
            ],
            "defaultValue": "WAF_v2",
            "metadata": {
                "description": "Application gateway tier"
            }
        },
        "applicationGatewayWafEnabled": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "WAF Enabled"
            }
        },
        "applicationGatewayWafMode": {
            "type": "string",
            "allowedValues": [
                "Detection",
                "Prevention"
            ],
            "defaultValue": "Detection",
            "metadata": {
                "description": "WAF Mode"
            }
        },
        "applicationGatewayWafRuleSetType": {
            "type": "string",
            "allowedValues": [
                "OWASP"
            ],
            "defaultValue": "OWASP",
            "metadata": {
                "description": "WAF Rule Set Type"
            }
        },
        "applicationGatewayWafRuleSetVersion": {
            "type": "string",
            "allowedValues": [
                "2.2.9",
                "3.0"
            ],
            "defaultValue": "3.0",
            "metadata": {
                "description": "WAF Rule Set Version"
            }
        }
    },
    "variables": {
        "clusterNamePrefix": "aks",
        "acrNamePrefix": "acr",
        "aiNamePrefix": "ai",
        "acrName": "[uniqueString(variables('acrNamePrefix'),resourceGroup().id)]",
        "appGatewayNamePrefix": "appg",
        "aksVnetAddressPrefix": "10.10.0.0/16",
        "aksClusterSubnetPrefix": "10.10.0.0/21",
        "appGatewaySubnetPrefixes": [
              "10.10.8.0/24",
              "10.10.9.0/24",
              "10.10.10.0/24",
              "10.10.11.0/24"
        ],
        "firewallSubnetPrefix": "10.10.12.0/24",
        "firewallSubnetName": "AzureFirewallSubnet",
        "aksVnetNamePrefix": "vnet",
        "aksClusterSubnetNamePrefix": "subnet",
        "readerRoleObjectId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
        "managedIdentityOperatorRoleObjectId": "f1a07417-d97a-45cb-824c-7a7467783830",
        "contributorRoleObjectId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
        "readerRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('readerRoleObjectId'))]",
        "managedIdentityOperatorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('managedIdentityOperatorRoleObjectId'))]",
        "contributorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('contributorRoleObjectId'))]",
        "deliveryRedisStorageName": "[concat(parameters('environmentName'),'rsto',uniqueString(resourceGroup().id))]",
        "nestedACRDeploymentName": "[concat('azuredeploy-acr-',parameters('acrResourceGroupName'),parameters('environmentName'))]",
        "aksLogAnalyticsNamePrefix": "logsAnalytics",
        "egressFirewallPrefix": "egressFw",
        "firewallPublicIpName": "[concat('firewallPip-',uniqueString(variables('egressFirewallPrefix'), resourceGroup().id))]",
        "environmentSettings": {
            "dev": {
                "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
                "aksMinCount": null,
                "aksMaxCount": null,
                "aksEnableAutoScaling": false,
                "acrName": "[variables('acrName')]",
                "appGatewayName": "[concat(parameters('environmentName'),'-ag-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "applicationGatewayMinCapacity": 1,
                "aksVnetName": "[uniqueString(variables('aksVnetNamePrefix'), resourceGroup().id)]",
                "aksClusterSubnetName": "[uniqueString(variables('aksClusterSubnetNamePrefix'), resourceGroup().id)]",
                "appGatewaySubnetIndex": 0,
                "appGatewayPublicIpName": "[concat(parameters('environmentName'),'-agip-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appGatewayPublicDnsName": "[concat(parameters('environmentName'),'-ingest-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
                "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
                "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
                "deliveryRedisCacheSKU": "Basic",
                "deliveryRedisCacheFamily": "C",
                "deliveryRedisCacheCapacity": 0,
                "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
                "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespaceSKU": "Premium",
                "ingestionSBNamespaceTier": "Premium",
                "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionServiceAccessKey": "IngestionServiceAccessKey",
                "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
                "workflowServiceAccessKey": "WorkflowServiceAccessKey",
                "agentCount": 2,
                "agentVMSize": "Standard_D2_v2",
                "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
                "workspaceSku": "Free",
                "workspaceRetentionInDays": null
            },
            "qa": {
                "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
                "aksMinCount": null,
                "aksMaxCount": null,
                "aksEnableAutoScaling": false,
                "acrName": "[variables('acrName')]",
                "appGatewayName": "[concat(parameters('environmentName'),'-ag-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "applicationGatewayMinCapacity": 1,
                "aksVnetName": "[uniqueString(variables('aksVnetNamePrefix'), resourceGroup().id)]",
                "aksClusterSubnetName": "[uniqueString(variables('aksClusterSubnetNamePrefix'), resourceGroup().id)]",
                "appGatewaySubnetIndex": 1,
                "appGatewayPublicIpName": "[concat(parameters('environmentName'),'-agip-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appGatewayPublicDnsName": "[concat(parameters('environmentName'),'-ingest-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
                "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
                "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
                "deliveryRedisCacheSKU": "Basic",
                "deliveryRedisCacheFamily": "C",
                "deliveryRedisCacheCapacity": 0,
                "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
                "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespaceSKU": "Premium",
                "ingestionSBNamespaceTier": "Premium",
                "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionServiceAccessKey": "IngestionServiceAccessKey",
                "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
                "workflowServiceAccessKey": "WorkflowServiceAccessKey",
                "agentCount": 3,
                "agentVMSize": "Standard_D2_v2",
                "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
                "workspaceSku": "Free",
                "workspaceRetentionInDays": null
            },
            "staging": {
                "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
                "aksMinCount": 3,
                "aksMaxCount": 50,
                "aksEnableAutoScaling": true,
                "acrName": "[variables('acrName')]",
                "appGatewayName": "[concat(parameters('environmentName'),'-ag-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "applicationGatewayMinCapacity": 2,
                "aksVnetName": "[uniqueString(variables('aksVnetNamePrefix'), resourceGroup().id)]",
                "aksClusterSubnetName": "[uniqueString(variables('aksClusterSubnetNamePrefix'), resourceGroup().id)]",
                "appGatewaySubnetIndex": 2,
                "appGatewayPublicIpName": "[concat(parameters('environmentName'),'-agip-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appGatewayPublicDnsName": "[concat(parameters('environmentName'),'-ingest-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
                "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
                "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
                "deliveryRedisCacheSKU": "Standard",
                "deliveryRedisCacheFamily": "C",
                "deliveryRedisCacheCapacity": 1,
                "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
                "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespaceSKU": "Premium",
                "ingestionSBNamespaceTier": "Premium",
                "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionServiceAccessKey": "IngestionServiceAccessKey",
                "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
                "workflowServiceAccessKey": "WorkflowServiceAccessKey",
                "agentCount": 3,
                "agentVMSize": "Standard_D2_v2",
                "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
                "workspaceSku": "PerGB2018",
                "workspaceRetentionInDays": 730
            },
            "prod": {
                "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
                "aksMinCount": 3,
                "aksMaxCount": 50,
                "aksEnableAutoScaling": true,
                "acrName": "[concat(parameters('environmentName'),variables('acrName'))]",
                "appGatewayName": "[concat(parameters('environmentName'),'-ag-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "applicationGatewayMinCapacity": 2,
                "aksVnetName": "[uniqueString(variables('aksVnetNamePrefix'), resourceGroup().id)]",
                "aksClusterSubnetName": "[uniqueString(variables('aksClusterSubnetNamePrefix'), resourceGroup().id)]",
                "appGatewaySubnetIndex": 3,
                "appGatewayPublicIpName": "[concat(parameters('environmentName'),'-agip-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appGatewayPublicDnsName": "[concat(parameters('environmentName'),'-ingest-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id))]",
                "appInsightsName": "[concat(parameters('environmentName'),uniqueString(variables('aiNamePrefix'),resourceGroup().id))]",
                "deliveryRedisStorageName": "[variables('deliveryRedisStorageName')]",
                "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
                "deliveryRedisCacheSKU": "Standard",
                "deliveryRedisCacheFamily": "C",
                "deliveryRedisCacheCapacity": 1,
                "deliveryCosmosDbName": "[concat(parameters('environmentName'),'-d-', uniqueString(resourceGroup().id))]",
                "deliveryRedisName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "deliveryKeyVaultName": "[concat(parameters('environmentName'),'-d-',uniqueString(resourceGroup().id))]",
                "packageMongoDbName": "[concat(parameters('environmentName'),'-p-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespace": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionSBNamespaceSKU": "Premium",
                "ingestionSBNamespaceTier": "Premium",
                "ingestionSBName": "[concat(parameters('environmentName'),'-i-',uniqueString(resourceGroup().id))]",
                "ingestionServiceAccessKey": "IngestionServiceAccessKey",
                "droneSchedulerKeyVaultName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "droneSchedulerCosmosDbName": "[concat(parameters('environmentName'),'-ds-',uniqueString(resourceGroup().id))]",
                "workflowKeyVaultName": "[concat(parameters('environmentName'),'-wf-',uniqueString(resourceGroup().id))]",
                "workflowServiceAccessKey": "WorkflowServiceAccessKey",
                "agentCount": 3,
                "agentVMSize": "Standard_D2_v2",
                "workspaceName": "[concat(parameters('environmentName'),'-la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
                "workspaceSku": "PerGB2018",
                "workspaceRetentionInDays": 730
            }
        },
        "aksClusterSubnet": {
            "name": "[variables('environmentSettings')[parameters('environmentName')].aksClusterSubnetName]",
            "properties": {
                "addressPrefix": "[variables('aksClusterSubnetPrefix')]",
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        "firewallSubnet": {
            "name": "[variables('firewallSubnetName')]",
            "properties": {
                "addressPrefix": "[variables('firewallSubnetPrefix')]",
                "serviceEndpoints": [
                    {
                        "service": "Microsoft.KeyVault",
                        "locations": [
                            "[resourceGroup().location]"
                        ]
                    },
                    {
                        "service": "Microsoft.AzureCosmosDB",
                        "locations": [
                            "[resourceGroup().location]"
                        ]
                    },
                    {
                        "service": "Microsoft.Storage",
                        "locations": [
                            "[resourceGroup().location]"
                        ]
                    },
                    {
                        "service": "Microsoft.ServiceBus",
                        "locations": [
                            "[resourceGroup().location]"
                        ]
                    }
                ]
            }
        },
        "copy": [
          {
            "name": "appGatewaySubnetsLoop",
            "count": "[length(variables('appGatewaySubnetPrefixes'))]",
            "input": {
              "name": "[concat('agsn-', uniqueString(variables('appGatewayNamePrefix'), resourceGroup().id), copyIndex('appGatewaySubnetsLoop'))]",
              "properties": {
                "addressPrefix": "[variables('appGatewaySubnetPrefixes')[copyIndex('appGatewaySubnetsLoop')]]"
              }
            }
          }
        ]
    },
    "resources": [
        {
            "name": "[variables('nestedACRDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "resourceGroup": "[parameters('acrResourceGroupName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "name": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
                            "type": "Microsoft.ContainerRegistry/registries",
                            "apiVersion": "2017-10-01",
                            "sku": {
                                "name": "Basic",
                                "tier": "Basic"
                            },
                            "location": "[resourceGroup().location]",
                            "tags": {
                                "displayName": "Container Registry",
                                "container.registry": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
                                "clusterName": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]"
                            },
                            "properties": {
                                "adminUserEnabled": false
                            }
                        },
                        {
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].acrName,'/Microsoft.Authorization/',guid(concat('aks',variables('environmentSettings')[parameters('environmentName')].acrName), resourceGroup().id))]",
                            "apiVersion": "2017-05-01",
                            "comments": "Grant the AKS cluster access to the ACR instance",
                            "tags": {
                                "displayName": "AKS SP RBAC Access to ACR",
                                "what": "rbac",
                                "to": "cluster",
                                "identity-type": "sp",
                                "access": "acr",
                                "reason": "pull-images"
                            },
                            "properties": {
                                "roleDefinitionId": "[variables('readerRoleId')]",
                                "principalId": "[parameters('servicePrincipalId')]",
                                "scope": "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]"
                            },
                            "dependsOn": [
                                "[concat(subscription().id, '/resourceGroups/',parameters('acrResourceGroupName'),'/providers/Microsoft.ContainerRegistry/registries/',variables('environmentSettings')[parameters('environmentName')].acrName)]"
                            ]
                        }
                    ],
                    "outputs": {
                        "acrId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('environmentSettings')[parameters('environmentName')].acrName)]",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].aksVnetName]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2018-06-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Vnet for the aks cluster and the app gateways",
                "environment": "shared network"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('aksVnetAddressPrefix')]"
                    ]
                },
                "subnets": "[concat(createArray(variables('aksClusterSubnet'), variables('firewallSubnet')), variables('appGatewaySubnetsLoop'))]"
            }
        },
        {
            "apiVersion": "2018-08-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('environmentSettings')[parameters('environmentName')].appGatewayPublicIpName]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Public IP address for the application gateway",
                "environment": "[parameters('environmentName')]"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('environmentSettings')[parameters('environmentName')].appGatewayPublicDnsName]"
                }
            }
        },
        {
            "apiVersion": "2018-08-01",
            "name": "[variables('environmentSettings')[parameters('environmentName')].appGatewayName]",
            "type": "Microsoft.Network/applicationGateways",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Application gateway for the app gateway ingress",
                "environment": "[parameters('environmentName')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('environmentSettings')[parameters('environmentName')].appGatewayPublicIpName)]"
            ],
            "properties": {
                "sku": {
                    "name": "[parameters('applicationGatewaySize')]",
                    "tier": "[parameters('applicationGatewayTier')]"
                },
                "autoscaleConfiguration": {
                    "minCapacity": "[variables('environmentSettings')[parameters('environmentName')].applicationGatewayMinCapacity]"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('appGatewaySubnetsLoop')[variables('environmentSettings')[parameters('environmentName')].appGatewaySubnetIndex].name)]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('environmentSettings')[parameters('environmentName')].appGatewayPublicIpName)]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "defaultAddressPool"
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "defaultBackendHttpSettings",
                        "properties": {
                            "Port": "80",
                            "Protocol": "Http"
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "defaultHttpListener",
                        "properties": {
                            "FrontendIpConfiguration": {
                                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('environmentSettings')[parameters('environmentName')].appGatewayName, 'appGatewayFrontendIP')]"
                            },
                            "FrontendPort": {
                                "Id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('environmentSettings')[parameters('environmentName')].appGatewayName, 'http')]"
                            },
                            "Protocol": "Http"
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "default",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('environmentSettings')[parameters('environmentName')].appGatewayName, 'defaultHttpListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('environmentSettings')[parameters('environmentName')].appGatewayName, 'defaultAddressPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('environmentSettings')[parameters('environmentName')].appGatewayName, 'defaultBackendHttpSettings')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "http",
                        "properties": {
                            "Port": "80"
                        }
                    }
                ],
                "webApplicationFirewallConfiguration": {
                    "enabled": "[parameters('applicationGatewayWafEnabled')]",
                    "firewallMode": "[parameters('applicationGatewayWafMode')]",
                    "ruleSetType": "[parameters('applicationGatewayWafRuleSetType')]",
                    "ruleSetVersion": "[parameters('applicationGatewayWafRuleSetVersion')]",
                    "disabledRuleGroups": []
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[variables('environmentSettings')[parameters('environmentName')].workspaceName]",
            "apiVersion": "2015-11-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "retentionInDays": "[variables('environmentSettings')[parameters('environmentName')].workspaceRetentionInDays]",
                "sku": {
                    "Name": "[variables('environmentSettings')[parameters('environmentName')].workspaceSku]"
                },
                "features": {
                    "searchVersion": 1
                }
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "2019-08-01",
            "location": "[resourceGroup().location]",
            "tags": {
                "environment": "shared cluster"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('environmentSettings')[parameters('environmentName')].workspaceName)]"
            ],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "minCount": "[variables('environmentSettings')[parameters('environmentName')].aksMinCount]",
                        "maxCount": "[variables('environmentSettings')[parameters('environmentName')].aksMaxCount]",
                        "enableAutoScaling": "[variables('environmentSettings')[parameters('environmentName')].aksEnableAutoScaling]",
                        "type": "VirtualMachineScaleSets",
                        "count": "[variables('environmentSettings')[parameters('environmentName')].agentCount]",
                        "vmSize": "[variables('environmentSettings')[parameters('environmentName')].agentVMSize]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "vnetSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('environmentSettings')[parameters('environmentName')].aksClusterSubnetName)]"
                    }
                ],
                "linuxProfile": {
                    "adminUsername": "[parameters('adminUsername')]",
                    "ssh": {
                        "publicKeys": [
                            {
                                "keyData": "[parameters('sshRSAPublicKey')]"
                            }
                        ]
                    }
                },
                "servicePrincipalProfile": {
                    "clientId": "[parameters('servicePrincipalClientId')]",
                    "secret": "[parameters('servicePrincipalClientSecret')]"
                },
                "addonProfiles": {
                    "omsagent": {
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('environmentSettings')[parameters('environmentName')].workspaceName)]"
                        },
                        "enabled": true
                    }
                },
                "enableRBAC": true,
                "networkProfile": {
                    "networkPolicy": "[parameters('networkPolicy')]",
                    "networkPlugin": "azure",
                    "serviceCidr": "10.2.0.0/24",
                    "dnsServiceIP": "10.2.0.10",
                    "dockerBridgeCidr": "172.17.0.1/16"
                }
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2015-05-01",
            "kind": "other",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "App Insights instance - Distributed Tracing",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "Application_Type": "other"
            }
        },
        {
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageName]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This storage account is used by Delivery Redis",
            "dependsOn": [],
            "tags": {
                "displayName": "Storage account for inflight deliveries",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "accountType": "[parameters('deliveryRedisStorageType')]"
            }
        },
        {
            "apiVersion": "2018-03-01",
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisName]",
            "type": "Microsoft.Cache/Redis",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "Redis Cache for inflight deliveries",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "dependsOn": [
                "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]"
            ],
            "properties": {
                "redisEnableNonSslPort": "false",
                "sku": {
                    "capacity": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheCapacity]",
                    "family": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheFamily]",
                    "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisCacheSKU]"
                }
            },
            "resources": [
                {
                    "name": "firewallAccess",
                    "type": "firewallRules",
                    "apiVersion": "2018-03-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))]"
                    ],
                    "properties": {
                        "startIP": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))).ipAddress]",
                        "endIP": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))).ipAddress]"
                    }
                },
                {
                    "apiVersion": "2017-05-01-preview",
                    "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
                    "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryRedisName, '/Microsoft.Insights/', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ],
                    "properties": {
                        "storageAccountId": "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]",
                        "logs": [],
                        "metrics": [
                            {
                                "timeGrain": "AllMetrics",
                                "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]",
                                "retentionPolicy": {
                                    "days": 90,
                                    "enabled": "[parameters('deliveryRedisDiagnosticsEnabled')]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
            "apiVersion": "2016-03-31",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "tags": {
                "displayName": "Delivery Cosmos Db",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
                "databaseAccountOfferType": "Standard",
                "isVirtualNetworkFilterEnabled": true,
                "virtualNetworkRules": [
                    {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                    }
                ],
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-04-08",
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "kind": "MongoDB",
            "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "tags": {
                "displayName": "Package Cosmos Db",
                "app": "fabrikam-package",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "databaseAccountOfferType": "Standard",
                "name": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
                "isVirtualNetworkFilterEnabled": true,
                "virtualNetworkRules": [
                    {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
            "apiVersion": "2015-04-08",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "properties": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
                "databaseAccountOfferType": "Standard",
                "isVirtualNetworkFilterEnabled": true,
                "virtualNetworkRules": [
                    {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                    }
                ],
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces",
            "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
            "apiVersion": "2017-04-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespaceSKU]",
                "tier": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespaceTier]"
            },
            "tags": {
                "displayName": "Ingestion and Workflow Service Bus",
                "app": "fabrikam-ingestion",
                "app-producer": "fabrikam-ingestion",
                "app-consumer": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "resources": [
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
                    "type": "queues",
                    "apiVersion": "2017-04-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ],
                    "properties": {
                        "lockDuration": "PT5M",
                        "maxSizeInMegabytes": "1024"
                    }
                },
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKey]",
                    "type": "AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "properties": {
                        "rights": [
                            "Send"
                        ]
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                },
                {
                    "name": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey]",
                    "type": "AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "properties": {
                        "rights": [
                            "Listen"
                        ]
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                },
                {
                    "name": "firewall",
                    "type": "VirtualNetworkRules",
                    "apiVersion": "2018-01-01-preview",
                    "properties": {
                        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName]",
            "apiVersion": "2016-10-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('environmentSettings')[parameters('environmentName')].deliveryRedisStorageId]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "tags": {
                "displayName": "Delivery Key Vault",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                        }
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('deliveryPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    },
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[variables('readerRoleObjectId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "CosmosDB-Endpoint",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName)).documentEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDB-Key",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName), '2016-03-31').primaryMasterKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "Redis-Endpoint",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)).hostName]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "Redis-AccessKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName), '2016-04-01').primaryKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "ApplicationInsights--InstrumentationKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
            "apiVersion": "2016-10-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "tags": {
                "displayName": "DroneScheduler Key Vault",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                        }
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('droneSchedulerPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "ApplicationInsights--InstrumentationKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBEndpoint",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)).documentEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName), '2016-03-31').primaryMasterKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]",
                        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBConnectionMode",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "Gateway"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBConnectionProtocol",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "Https"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxConnectionsLimit",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "50"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxParallelism",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "-1"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "CosmosDBMaxBufferedItemCount",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "0"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "FeatureManagement--UsePartitionKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "false"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
            "apiVersion": "2016-10-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('environmentSettings')[parameters('environmentName')].aksVnetName)]"
            ],
            "tags": {
                "displayName": "Workflow Key Vault",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny",
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('environmentSettings')[parameters('environmentName')].aksVnetName, variables('firewallSubnetName'))]"
                        }
                    ]
                },
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('workflowPrincipalId')]",
                        "permissions": {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "secrets",
                    "name": "QueueName",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueEndpoint",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)).serviceBusEndpoint]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.ServiceBus/namespaces', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueAccessPolicyName",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "QueueAccessPolicyKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[listkeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey), '2017-04-01').primaryKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace, variables('environmentSettings')[parameters('environmentName')].workflowServiceAccessKey)]"
                    ]
                },
                {
                    "type": "secrets",
                    "name": "ApplicationInsights-InstrumentationKey",
                    "apiVersion": "2015-06-01",
                    "properties": {
                        "value": "[reference(resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName),'2015-05-01').InstrumentationKey]"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]",
                        "[resourceId('Microsoft.Insights/components', variables('environmentSettings')[parameters('environmentName')].appInsightsName)]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-delivery',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "tags": {
                "displayName": "Delivery app RBAC Reader for Key Vault",
                "what": "rbac",
                "to": "pod",
                "identity-type": "msi",
                "access": "keyvault",
                "reason": "aad-pod-identity",
                "flex-vol": "no",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRoleId')]",
                "principalId": "[parameters('deliveryPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-dronescheduler',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "tags": {
                "displayName": "DroneScheduler app RBAC Reader for Key Vault",
                "what": "rbac",
                "to": "pod",
                "identity-type": "msi",
                "access": "keyvault",
                "reason": "aad-pod-identity",
                "flex-vol": "no",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRoleId')]",
                "principalId": "[parameters('droneSchedulerPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName,'/Microsoft.Authorization/',guid(concat('kv-workflow',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "tags": {
                "displayName": "Workflow app RBAC Reader for Key Vault",
                "what": "rbac",
                "to": "pod",
                "identity-type": "msi",
                "access": "keyvault",
                "reason": "aad-pod-identity",
                "flex-vol": "yes",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRoleId')]",
                "principalId": "[parameters('workflowPrincipalId')]",
                "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName)]"
            ]
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('deliveryIdName'), '/Microsoft.Authorization/', guid(concat('msi-delivery',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "comments": "Grant the AKS cluster access to the delivery managed id",
            "tags": {
                "displayName": "AKS SP RBAC Access for delivery managed identity",
                "what": "rbac",
                "to": "cluster",
                "identity-type": "sp",
                "access": "msi",
                "reason": "aad-pod-identity",
                "app": "fabrikam-delivery",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
                "principalId": "[parameters('servicePrincipalId')]"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('workflowIdName'), '/Microsoft.Authorization/', guid(concat('msi-workflow',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "comments": "Grant the AKS cluster access to the workflow managed id",
            "tags": {
                "displayName": "AKS SP RBAC Access for workflow managed identity",
                "what": "rbac",
                "to": "cluster",
                "identity-type": "sp",
                "access": "msi",
                "reason": "aad-pod-identity",
                "app": "fabrikam-workflow",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
                "principalId": "[parameters('servicePrincipalId')]"
            }
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
            "name": "[concat(parameters('droneSchedulerIdName'), '/Microsoft.Authorization/', guid(concat('msi-dronescheduler',parameters('environmentName')), resourceGroup().id))]",
            "apiVersion": "2017-05-01",
            "comments": "Grant the AKS cluster access to the drone scheduler managed id",
            "tags": {
                "displayName": "AKS SP RBAC Access for dronescheduler managed identity",
                "what": "rbac",
                "to": "cluster",
                "identity-type": "sp",
                "access": "msi",
                "reason": "aad-pod-identity",
                "app": "fabrikam-dronescheduler",
                "environment": "[parameters('environmentName')]"
            },
            "properties": {
                "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
                "principalId": "[parameters('servicePrincipalId')]"
            }
        },
        {
            "type": "Microsoft.Network/applicationGateways/providers/roleAssignments",
            "name": "[concat(variables('environmentSettings')[parameters('environmentName')].appGatewayName, '/Microsoft.Authorization/', guid(concat('msi-appgatewaycontroller', 'appgateway'), resourceGroup().id, parameters('environmentName')))]",
            "apiVersion": "2017-05-01",
            "comments": "Grant the App gateway controller access to the app gateway",
            "tags": {
                "displayName": "App gateway controller RBAC Contributor",
                "what": "rbac",
                "to": "pod",
                "identity-type": "msi",
                "access": "appgateway",
                "reason": "aad-pod-identity",
                "flex-vol": "no"
            },
            "properties": {
                "roleDefinitionId": "[variables('contributorRoleId')]",
                "principalId": "[parameters('appGatewayControllerPrincipalId')]",
                "scope": "[resourceId('Microsoft.Network/applicationGateways', variables('environmentSettings')[parameters('environmentName')].appGatewayName)]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/applicationGateways', variables('environmentSettings')[parameters('environmentName')].appGatewayName)]"
            ]
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "name": "[guid(concat('msi-appgatewaycontroller', 'resourcegroup', parameters('environmentName')), resourceGroup().id)]",
            "apiVersion": "2017-05-01",
            "comments": "Grant the App gateway controller access to the AKS cluster",
            "tags": {
                "displayName": "App gateway controller RBAC Reader",
                "what": "rbac",
                "to": "pod",
                "identity-type": "msi",
                "access": "appgateway",
                "reason": "aad-pod-identity",
                "flex-vol": "no"
            },
            "properties": {
                "roleDefinitionId": "[variables('readerRoleId')]",
                "principalId": "[parameters('appGatewayControllerPrincipalId')]",
                "scope": "[resourceGroup().id]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "name": "[variables('firewallPublicIpName')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
            }
        }
    ],
    "outputs": {
        "acrName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].acrName]",
            "type": "string"
        },
        "aksClusterName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].aksClusterName]",
            "type": "string"
        },
        "appInsightsName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].appInsightsName]",
            "type": "string"
        },
        "deliveryKeyVaultUri": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].deliveryKeyVaultName)).vaultUri]",
            "type": "string"
        },
        "deliveryCosmosDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].deliveryCosmosDbName]",
            "type": "string"
        },
        "droneSchedulerKeyVaultName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName]",
            "type": "string"
        },
        "droneSchedulerKeyVaultUri": {
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('environmentSettings')[parameters('environmentName')].droneSchedulerKeyVaultName)).vaultUri]",
            "type": "string"
        },
        "droneSchedulerCosmosDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].droneSchedulerCosmosDbName]",
            "type": "string"
        },
        "packageMongoDbName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].packageMongoDbName]",
            "type": "string"
        },
        "workflowKeyVaultName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].workflowKeyVaultName]",
            "type": "string"
        },
        "ingestionQueueNamespace": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBNamespace]",
            "type": "string"
        },
        "ingestionQueueName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionSBName]",
            "type": "string"
        },
        "ingestionServiceAccessKeyName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].ingestionServiceAccessKey]",
            "type": "string"
        },
        "acrDeploymentName": {
            "value": "[variables('nestedACRDeploymentName')]",
            "type": "string"
        },
        "appGatewayName": {
            "value": "[variables('environmentSettings')[parameters('environmentName')].appGatewayName]",
            "type": "string"
        },
        "appGatewayPublicIpFqdn": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('environmentSettings')[parameters('environmentName')].appGatewayPublicIpName)).dnsSettings.fqdn]",
            "type": "string"
        },
        "appGatewaySubnetPrefix": {
            "value": "[variables('appGatewaySubnetsLoop')[variables('environmentSettings')[parameters('environmentName')].appGatewaySubnetIndex].properties.addressPrefix]",
            "type": "string"
        },
        "aksVNetName": {
            "type": "string",
            "value": "[variables('environmentSettings')[parameters('environmentName')].aksVnetName]"
        },
        "aksClusterSubnetName": {
            "type": "string",
            "value": "[variables('environmentSettings')[parameters('environmentName')].aksClusterSubnetName]"
        },
        "aksClusterSubnetPrefix": {
            "type": "string",
            "value": "[variables('aksClusterSubnetPrefix')]"
        },
        "firewallSubnetName": {
            "type": "string",
            "value": "[variables('firewallSubnetName')]"
        },
        "firewallPublicIpName": {
            "type": "string",
            "value": "[variables('firewallPublicIpName')]"
        },
        "deliveryRedisHostName": {
            "value": "[reference(resourceId('Microsoft.Cache/Redis', variables('environmentSettings')[parameters('environmentName')].deliveryRedisName)).hostName]",
            "type": "string"
        }
    }
}
